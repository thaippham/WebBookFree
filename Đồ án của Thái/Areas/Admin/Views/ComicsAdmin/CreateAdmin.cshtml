@model Đồ_án_của_Thái.Areas.Admin.ViewModelsAdmin.ComicViewModelsAdmin

@{
    ViewBag.Title = "CreateAdmin";
    Layout = "~/Areas/Admin/Views/Shared/_Layout_Admin.cshtml";
}
<div class="container-fluid px-4">
    <h1 class="mt-4">Add Book</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item active">Thêm Sách</li>
    </ol>
    @using (Html.BeginForm("CreateAdmin", "ComicsAdmin", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.NameComic, "Tên", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NameComic, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NameComic, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Author, "Tác giả", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Category, "Thể Loại", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Category,
                            new SelectList(Model.Categories, "Id", "Name"), "", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Title, "Mô tả", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    <div id="titleCountdown"></div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Picture, "Hình ảnh", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <img id="picturePreview" src="" alt="Preview" style="width: 0; height: 0;max-width: 0" />
                    @Html.EditorFor(model => model.Picture, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "pictureUrl" } })
                    @Html.ValidationMessageFor(model => model.Picture, "", new { @class = "text-danger" })
                    <input type="file" name="fileUpload" id="fileUpload" accept="image/*" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    @Html.ActionLink("Hủy", "IndexAdmin", "HomeAdmin", null, new { @class = "btn btn-danger" })
                    <input style="margin-left:10px;" type="submit" value="Create" class="btn btn-success" id="createButton" disabled />
                </div>
            </div>
        </div>
    }
 </div>
    @section upload
 {
        <script>
            $(document).ready(function () {
                var nameComicInput = $("#NameComic");
                var authorInput = $("#Author");
                var categoryDropdown = $("#Category");
                var titleInput = $("#Title");
                var pictureInput = $("#pictureUrl");
                var createButton = $("#createButton");

                function checkEmptyInputs() {
                    var isNameComicEmpty = nameComicInput.val().trim() === '';
                    var isAuthorEmpty = authorInput.val().trim() === '';
                    var isCategoryEmpty = categoryDropdown.val() === '';
                    var isTitleEmpty = titleInput.val().trim() === '';
                    var isPictureEmpty = pictureInput.val().trim() === '';

                    createButton.prop('disabled', isNameComicEmpty || isAuthorEmpty || isCategoryEmpty || isTitleEmpty || isPictureEmpty);
                }

                nameComicInput.on('input', checkEmptyInputs);
                authorInput.on('input', checkEmptyInputs);
                categoryDropdown.on('change', checkEmptyInputs);
                titleInput.on('input', checkEmptyInputs);
                pictureInput.on('input', checkEmptyInputs);
                checkEmptyInputs();
            });
            $(function () {
                $('#btnUpload').click(function () {
                    $('#fileUpload').trigger('click');
                });

                $('#fileUpload').change(function (e) {
                    if (window.FormData !== undefined) {
                        var fileUpload = e.target;
                        var files = fileUpload.files;

                        if (files.length > 0) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $('#picturePreview').attr('src', e.target.result).css('width', '290px').css('height', 'auto').css('max-width', '290px');
                            };
                            reader.readAsDataURL(files[0]);
                        }

                        var formData = new FormData();
                        formData.append('file', files[0]);
                        $.ajax({
                            type: 'POST',
                            url: '/Comics/ProcessUpload',
                            contentType: false,
                            processData: false,
                            data: formData,
                            success: function (urlImage) {
                                $('#picturePreview').attr('src', urlImage);
                                $('#pictureUrl').val(urlImage);
                            },
                            error: function (err) {
                                alert('Error ', err.statusText);
                            }
                        });
                    }
                });
                $(document).ready(function () {
                    var imageUrl = $('#pictureUrl').val();
                    if (imageUrl) {
                        $('#picturePreview').attr('src', imageUrl).css('width', '290px').css('height', 'auto').css('max-width', '290px');
                    }
                });
            });

        </script>
    }
    @section count
{
        <script>
            $(document).ready(function () {
                var maxLength = 1000;
                $('#Title').keyup(function () {
                    var length = $(this).val().length;
                    var countdown = maxLength - length;
                    $('#titleCountdown').text(countdown + ' ký tự còn lại.');
                });
            });
        </script>
    }
    @section scripts
{
        @Scripts.Render("~/bundles/jqueryval");
    }
<style>
    input#btnUpload {
        margin-top: 5px;
    }

    textarea#Title {
        width: 100%;
        height: 100px;
    }

    .form-group {
        margin: 40px;
    }

    .form-group {
        margin-bottom: 10px;
    }
</style>
